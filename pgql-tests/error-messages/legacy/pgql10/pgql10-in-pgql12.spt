module pgql10

language pgql-lang

test Double dash (1) [[

  SELECT n
   MATCH (n) [[-- (o)]]

]] error like "Use [-] instead of [--]" at #1

test Double dash (2) [[

  SELECT n
   MATCH (n) [[--> (o)]]

]] error like "Use [-] instead of [--]" at #1

test Double dash (3) [[

  SELECT n
   MATCH (n) [[<-- (o)]]

]] error like "Use [-] instead of [--]" at #1

test := [[

    PATH a [[:=]] ()
  SELECT n
   MATCH (n)

]] error like "Use [AS] instead of [:=]" at #1

test OO-style function call[[

  SELECT [[n.labels()]] AS labels
       , [[e.label()]] AS label
       , [[n.hasLabel('lbl')]] AS hasLabel
       , [[n.id()]] AS id
       , [[n.has('prop1', 'prop2')]] AS has
       , [[n.inDegree()]] AS inDegree
       , [[n.outDegree()]] AS outDegree
   MATCH (n) -[e]-> (m)

]] error like "Use [labels(x)] instead of [x.labels()]" at #1
   error like "Use [label(x)] instead of [x.label()]" at #2
   error like "Use [has_label(x, 'lbl')] instead of [x.hasLabel('lbl')]" at #3
   error like "Use [id(x)] instead of [x.id()]" at #4
   error like "Use [x.prop IS NOT NULL] instead of [x.has(prop)]" at #5
   error like "Use [in_degree(x)] instead of [x.indegree()]" at #6
   error like "Use [out_degree(x)] instead of [x.out_degree()]" at #7

test Double-quoted strings and labels [[

  SELECT n
   MATCH (n:[['lbl']])
   WHERE n.prop = [["string"]]

]] error like "Use double quotes to delimit labels" at #1
   error like "Use single quotes for character string literals; not double quotes" at #2

test ID testing through @ [[

  SELECT n
   MATCH (n[[@123]])

]] error like "Use [id(x) = xyz] instead of [@xyz]" at #1

test Constraints in MATCH [[

  SELECT n
   MATCH (n [[WITH prop = 123]])

]] error like "Constraints should be specified in the WHERE clause instead of the WITH" at #1

test Constraints in MATCH [[

  SELECT n
   MATCH (n)
   WHERE [[!n.married]]

]] error like "Use [NOT] instead of [!]" at #1

test Constraints in MATCH [[

  SELECT n
   MATCH (n)
   WHERE [[n.name =~ 'string']]

]] error like "Use [java_regexp_like(exp1, exp2)] instead of [exp1 =~ exp2]" at #1

test MATCH (1) [[

  SELECT n
    [[FROM g]]
   WHERE (n)

]] error like "Use [SELECT .. FROM MATCH( .. ) WHERE ..] or [SELECT .. FROM graphName MATCH( .. ) WHERE ..]" at #1

test MATCH (2) [[

  SELECT n
   WHERE (n), EXISTS [[( SELECT * MATCH (n) )]]

]] error like "Use [SELECT .. FROM MATCH( .. ) WHERE ..] or [SELECT .. FROM graphName MATCH( .. ) WHERE ..]" at #1

test MATCH (3) [[

  SELECT n
   WHERE (n), n.prop = [[( SELECT n.prop AS prop MATCH (n) )]]

]] error like "Use [SELECT .. FROM MATCH( .. ) WHERE ..] or [SELECT .. FROM graphName MATCH( .. ) WHERE ..]" at #1

test MATCH (4) [[

    PATH p [[AS]] ()
  SELECT n
   WHERE (n)

]] error like "Use [SELECT .. FROM MATCH( .. ) WHERE ..] or [SELECT .. FROM graphName MATCH( .. ) WHERE ..]" at #1

test MATCH (5) [[

  SELECT [[EXTRACT(MONTH FROM n.dob)]] AS month
   WHERE (n)

]] error like "Use [SELECT .. FROM MATCH( .. ) WHERE ..] or [SELECT .. FROM graphName MATCH( .. ) WHERE ..]" at #1

test MATCH (6) [[

  SELECT [[ARRAY_AGG(n.prop)]] AS array
   WHERE (n)

]] error like "Use [SELECT .. FROM MATCH( .. ) WHERE ..] or [SELECT .. FROM graphName MATCH( .. ) WHERE ..]" at #1

test MATCH (7) [[

  SELECT n
   WHERE [[SHORTEST (n) ->* (m)]]

]] error like "Use [SELECT .. FROM MATCH( .. ) WHERE ..] or [SELECT .. FROM graphName MATCH( .. ) WHERE ..]" at #1
