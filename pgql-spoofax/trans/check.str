module check

imports

  stratego/-
  libspoofax/properties/-
  libspoofax/nabl/-
  libspoofax/task/-
  libspoofax/types/-
  signatures/-
  normalized-signatures
  common
  names/-
  pp
  runtime/properties/-
  runtime/task/-

rules // Unresolved/duplicate variables

  nabl-check-disable-unresolved = id
  nabl-check-disable-duplicate(|uri, ns) = id

  nabl-constraint(|ctx):
    query@NormalizedQuery(_, selectClause, _, matchClause, group-by, having, order-by, _, _, _) -> <fail>
    with unresolved-vars := <collect-in-outer-query(?VarRef(<id>))> query
        ; if None() := group-by
          then <batch-generate-error(|ctx, "Unresolved variable")> unresolved-vars
          else unresolved-vars-after-grouping := <collect-in-outer-query-outside-aggregation(?VarRef(<id>))> (selectClause, having, order-by)
             ; other-unresolved-vars := <diff> (unresolved-vars, unresolved-vars-after-grouping)
             ; <batch-generate-error(|ctx, "Unresolved variable")> other-unresolved-vars
             ; if CreateOneGroup() := group-by // aggregation without GROUP BY
               then <batch-generate-error(|ctx, "Unresolved variable (did you mean to use an aggregation?)")> unresolved-vars-after-grouping
               else <batch-generate-error(|ctx, "Unresolved variable (did you mean to use a group key?)")> unresolved-vars-after-grouping
               end
          end

  nabl-constraint(|ctx):
    NormalizedQuery(_, selectOrModifyClause, _, graphPattern, groupClause, _, _, _, _, _) -> <fail>
    with matchVars := <?None(); ![] <+ ?Some(GraphPattern(vertices, edges, _)); !(vertices, edges); collect(is-pattern-elem); collect-om(get-pattern-elem, conc)> graphPattern
       ; groupExpressions := <collect-om(?ExpAsVar(_, <id>, _, _), conc)> groupClause
       ; <generate-error-on-duplicates(|ctx, "Duplicate variable")> matchVars
       ; <generate-error-on-duplicates(|ctx, "Duplicate column name in GROUP BY")> groupExpressions
       ; if <?SelectClause(_, _)> selectOrModifyClause
         then selectExpressions := <collect-om(?ExpAsVar(_, <id>, _, _), conc)> selectOrModifyClause
            ; <generate-error-on-duplicates(|ctx, "Duplicate column name in SELECT")> selectExpressions
            ; insertVars := []
         else // MODIFY query
              insertVars := <collect-om(?VertexInsertion(<id>, _, _, _) + ?DirectedEdgeInsertion(<id>, _, _, _, _, _), conc)> selectOrModifyClause
            ; <generate-error-on-duplicates(|ctx, "Duplicate variable in INSERT")> insertVars
            ; updateVars := <collect-om(?Update(VarRef(<id>), _) + ?Update(VarRef(<id>, _), _), conc)> selectOrModifyClause
            ; updates-of-inserts := <strip-annos; isect> (updateVars, insertVars)
            ; <batch-generate-error(|ctx, "Cannot update an element that is being inserted")> updates-of-inserts
            ; deleteVars := <(collect-one(?DeleteClause(<id>)) <+ ![]); filter(?VarRef(<id>, _))> selectOrModifyClause
            ; sourceVertices := <collect-om(?DirectedEdgeInsertion(_, _, VarRef(<id>, _), _, _, _), conc)> selectOrModifyClause
            ; destinationVertices := <collect-om(?DirectedEdgeInsertion(_, _, _, VarRef(<id>, _), _, _), conc)> selectOrModifyClause
            ; all-updateVars := <conc> (updateVars, sourceVertices, destinationVertices)
            ; deletes-of-updates := <strip-annos; isect> (all-updateVars, deleteVars)
            ; <batch-generate-error(|ctx, "Element is deleted in DELETE clause")> deletes-of-updates
         end

       ; groupVars := <collect(?ExpAsVar(_, <id>, NonAnonymous(), _))> groupClause
       ; redefinitions-in-groupBy := <strip-annos; isect> (groupVars, matchVars)
       ; <batch-generate-error(|ctx, "Duplicate variable: variable already defined in the MATCH clause")> redefinitions-in-groupBy

       ; if <?None()> groupClause
         then redefinition-in-modify := <strip-annos; isect> (insertVars, matchVars)
            ; <batch-generate-error(|ctx, "Duplicate variable: variable already defined in the MATCH clause")> redefinition-in-modify
         else if <?SelectClause(_, _)> selectOrModifyClause
              then selectOrInsertVars := <collect(?ExpAsVar(_, <id>, NonAnonymous(), _))> selectOrModifyClause
              else selectOrInsertVars := insertVars
              end
            ; redefinitions-in-select-or-modify := <strip-annos; isect> (selectOrInsertVars, groupVars)
            ; <batch-generate-error(|ctx, "Duplicate variable: variable already defined in the GROUP BY clause")> redefinitions-in-select-or-modify
         end

  nabl-constraint(|ctx):
    query@NormalizedQuery(_, selectClause, _, Some(GraphPattern(_, edges, _)), _, _, _, _, _, _) -> <fail>
    with group-variables := <collect-in-outer-query(?CommonPathExpression(_, _, _, _, _); get-origin-positions-of-variables); concat> query
       ; varRefs-per-aggregation := <collect-in-outer-query(is-aggregate); map(origin-track-forced(collect-in-outer-query(?VarRef(_, <id>)); !Some(<id>)))> query
       ; varRefs-per-aggregation' := <filter(has-multiple-groupVarRefs(|group-variables))> varRefs-per-aggregation
       ; <batch-generate-error(|ctx, "Accessing multiple group variables in a single aggregation is not yet supported")> varRefs-per-aggregation'

  get-origin-positions-of-variables:
    CommonPathExpression(_, Vertices(vertices), Edges(edges), _, _) -> <conc; make-set> (origins-of-vertices, origins-of-edges)
    with origins-of-vertices := <map(?Vertex(_, <id>, _))> vertices
       ; origins-of-edges := <filter(?Edge(_, _, _, _, <id>, _))> edges

  has-multiple-groupVarRefs(|group-variables):
    t@Some(varRefs-in-aggregation) -> t
    where group-varRefs := <isect; not(?[] + ?[_])> (group-variables, varRefs-in-aggregation)

  is-pattern-elem = ?Vertex(_, _, _) + ?Edge(_, _, _, _, _, _)
  get-pattern-elem = ?Vertex(<id>, _, _) + ?Edge(_, <id>, _, _, _, _)

  generate-error-on-duplicates(|ctx, message) = strip-annos; ?vars; map(generate-error-on-duplicate(|ctx, vars, message))

  generate-error-on-duplicate(|ctx, vars, message):
    var -> <id>
    with vars' := <filter(?var)> vars
       ; <try(gt; !var; generate-error(|ctx, message))> (<length> vars', 1)

  nabl-constraint(|ctx):
    SelectClause(Star(), ExpAsVars(expAsVars)) -> <fail>
    with group-variables := <filter(get-group-variable-from-select-star; ?Identifier(<id>))> expAsVars
       ; <map(generate-error(|ctx, $[Cannot select all variables since [<id>] is a group variable but group variables cannot be selected]))> group-variables

  get-group-variable-from-select-star = ?ExpAsVar(VarRef(<id>), _, _, _); ?v; origin-text; ?"*"; !v

rules // in-lined constraints

  nabl-constraint(|ctx):
    ReferenceInInlinedConstraint(v) -> <fail>
    with
      <generate-error(|ctx, $['[v]' should be omitted here])> v

  nabl-constraint(|ctx):
    CrossReferenceInInlinedConstraint(v) -> <fail>
    with
      <generate-error(|ctx, $['[v]' is not visible here])> v

rules // vertex in WHERE without rounded brackets

  nabl-constraint(|ctx):
    Vertex(v, _, _) -> <fail>
    where
      <string-ends-with(|<VERTEX_WITHOUT_BRACKETS>)> v
    with
      <generate-error(|ctx, $<Vertices need to be surrounded by brackets: (<<origin-text> v>)>)> v

rules

  nabl-constraint(|ctx):
    NormalizedQuery(_, SelectClause(_, ExpAsVars(select-elems)), _, _, groupClause, havingClause, orderByClause, _, _, _) -> <fail>
    where
      None() := groupClause
    ; [] := <get-aggregations> select-elems // there are no aggregations in the SELECT
    with
      aggregations-in-orderByclause := <get-aggregations> orderByClause
    ; <batch-generate-error(|ctx, "Aggregation in ORDER BY only allowed if SELECT has aggregations")> aggregations-in-orderByclause

  // if SELECT DISTINCT then ORDER BY expressions may only be repetitions of expressions in SELECT
  nabl-constraint(|ctx):
    NormalizedQuery(_, SelectClause(Some(Distinct()), ExpAsVars(select-elems)), _, _, _, _, Some(OrderByClause(order-by-elems)), _, _, _) -> <fail>
    with
      select-vars := <map(?ExpAsVar(_, <id>, _, _)); strip-annos> select-elems
    ; order-by-expressions := <map(?OrderByElem(<id>, _, _)); strip-annos> order-by-elems
    ; order-by-expressions-not-in-select := <remove-all(?VarRef(<id>, _); !(<id>, select-vars); elem)> order-by-expressions
    ; <batch-generate-error(|ctx, "Because of DISTINCT projection, the expression in ORDER BY should be one of the expressions in the SELECT")> order-by-expressions-not-in-select

  nabl-constraint(|ctx):
    t@Constraints(_) -> <fail>
    with
      aggregations := <get-aggregations-without-group-variables> t;
      <batch-generate-error(|ctx, "Aggregation without group variables not allowed in the WHERE clause")> aggregations

  nabl-constraint(|ctx):
    t@GroupByClause(_) -> <fail>
    with
      aggregations := <get-aggregations-without-group-variables> t;
      <batch-generate-error(|ctx, "Aggregation without group variables not allowed in GROUP BY")> aggregations

  get-aggregations-without-group-variables = get-aggregations; filter(not(contains-varRef))

  contains-varRef = oncetd(?VarRef(_, _))

  nabl-constraint(|ctx):
    e@IllegalNull() -> <fail>
    with
      <generate-error(|ctx, "Use IS NULL or IS NOT NULL")> e

  nabl-constraint(|ctx):
    SelectClause(_, e@Star()) -> <fail>
    with
      <generate-error(|ctx, "SELECT * not allowed in combination with GROUP BY")> e

  nabl-constraint(|ctx):
    SelectClause(_, e@ExpAsVars([])) -> <fail>
    with
      <generate-error(|ctx, "SELECT * not allowed if there are no variables in the graph pattern")> e

  nabl-constraint(|ctx):
    COUNT(Some(Distinct()), e@Star()) -> <fail>
    with
      <generate-error(|ctx, "* not allowed in combination with DISTINCT")> e

rules // subqueries

  nabl-constraint(|ctx):
    q@NormalizedQuery(_, _, _, _, _, _, _, _, _, _) -> <fail>
    with scalarSubqueries := <collect(?Exists(_) + ?Subquery(_)); remove-all(?Exists(_))> q
       ; multiColumnScalarSubqueries := <filter(is-multi-column-subquery)> scalarSubqueries
       ; zeroColumnScalarSubqueries := <filter(is-zero-column-subquery)> scalarSubqueries
       ; <batch-generate-error(|ctx, "Scalar subquery is expected to return a single column, but multiple columns were returned")> multiColumnScalarSubqueries
       ; <batch-generate-error(|ctx, "Scalar subquery is expected to return a single column, but zero columns were returned")> zeroColumnScalarSubqueries

  is-multi-column-subquery = ?Subquery(NormalizedQuery(_, SelectClause(_, e@ExpAsVars(expAsVars)), _, _, _, _, _, _, _, _))
                           ; where(not( <eq> (<length> expAsVars, 1) )); !e

  is-zero-column-subquery = ?Subquery(NormalizedQuery(_, SelectClause(_, e@ExpAsVars(expAsVars)), _, _, _, _, _, _, _, _))
                           ; where( <eq> (<length> expAsVars, 0) ); !e

  nabl-constraint(|ctx):
    Subquery(NormalizedQuery(_, t@selectOrUpdateClause, _, _, _, _, _, _, _, _)) -> <fail>
    where not ( <?SelectClause(_, _)> selectOrUpdateClause )
    with <generate-error(|ctx, "SELECT clause expected here")> t

rules // helper rules

  batch-generate-error(|ctx, m) = map(generate-error(|ctx, m))
    
  generate-error(|ctx, m):
    t -> <id>
    with
      failtask := <task-create-fail(|ctx)>
    ; <task-create-error-on-failure(|ctx, failtask, m)> t

  nabl-constraint(|ctx):
    ErrorMessage(term, m) -> <fail>
    where
      <generate-error(|ctx, m)> term

rules // temporary limitation

  nabl-constraint(|ctx):
    CommonPathExpression(_, vertices, connections, Constraints([constraint]), _) -> <fail>
    with vertexVariables := <collect(?Vertex(<id>, _, _))> vertices
       ; connectionsVariables := <collect(?Edge(_, <id>, _, _, _, _) + ?Path(_, _, _, _, <id>, _, _, _))> connections
       ; variablesDefs := <union> (vertexVariables, connectionsVariables)
       ; <generate-error-on-cross-constraint(|ctx, variablesDefs)> constraint

  generate-error-on-cross-constraint(|ctx, variablesDefs):
    t@And(lhs, rhs) -> t
    with <generate-error-on-cross-constraint(|ctx, variablesDefs)> lhs
       ; <generate-error-on-cross-constraint(|ctx, variablesDefs)> rhs

  generate-error-on-cross-constraint(|ctx, variablesDefs):
    t -> t
    where <not(?And(_, _))> t
    with variables := <collect(?VarRef(<id>, _) + ?Vertex(<id>, _, _) + ?Edge(_, <id>, _, _, _, _) + ?Path(_, _, _, _, <id>, _, _, _))> t
       ; variableRefs := <strip-annos; isect> (variablesDefs, variables)
       ; <try(!(<length> variableRefs, 1); gt; !t; generate-error(|ctx, "Not yet supported: expressions with multiple variables"))> t

  nabl-constraint(|ctx):
    ComplexRegularExpressionNotSupported(edgesOrPaths) -> <fail>
    with [_|[secondEdgeOrPath|_]] := edgesOrPaths
       ; <generate-error(|ctx, "Not yet supported: multiple edge patterns in SHORTEST or CHEAPEST")> edgesOrPaths

  nabl-constraint(|ctx):
    ComplexParenthesizedRegularExpressionNotSupported(edges) -> <fail>
    with <generate-error(|ctx, "Not yet supported: multiple edge patterns in SHORTEST or CHEAPEST")> edges

  nabl-constraint(|ctx):
    Path(_, _, _, _, _, _, _, kValue) -> <fail>
    where <?"0"> kValue
    with <generate-error(|ctx, "Value should be greater than 0")> kValue

  nabl-constraint(|ctx):
    Path(_, _, pathExpression, quantifier, _, _, goal, _) -> <fail>
    where <?Shortest() + ?Cheapest()> goal
        ; <not(?Some(BetweenNAndM("0", "-1")))> quantifier
    with error-term := <?Some(_) <+ !pathExpression; collect-one(?Edge(_, _, _, _, _, _))> quantifier 
       ; <generate-error(|ctx, "Kleene star (*) required for now")> error-term

  nabl-constraint(|ctx):
    t@CommonPathExpression(_, _, connections, _, _) -> <fail>
    where <collect-in-outer-query(?Path(_, _, _, _, _, _, _, _)); not(?[])> connections
    with <generate-error(|ctx, "Nested regular expressions not supported")> t

rules // CHEAPEST

  nabl-constraint(|ctx):
    t@Path(_, _, CommonPathExpression(_, _, _, Constraints(constraints), costClause), _, _, _, Cheapest(), _) -> <fail>
    where <?None()> costClause
    with if <?[]> constraints
    then <generate-error(|ctx, "COST clause expected after pattern")> t
    else <?[<id>]; generate-error(|ctx, "COST clause expected after WHERE clause")> constraints
    end

  nabl-constraint(|ctx):
    t@Path(_, _, CommonPathExpression(_, vertices, edges, _, Some(CostClause(costExpression))), _, _, _, Cheapest(), _) -> <fail>
    where <?Vertices([Vertex(v1, _, _), Vertex(v2, _, _)])> vertices
        ; <?Edges([Edge(_, e, _, _, _, _)])> edges
    with variablesDefs := [v1, v2, e]
       ; <generate-error-on-cross-constraint(|ctx, variablesDefs)> costExpression

  nabl-constraint(|ctx):
    Path(_, _, CommonPathExpression(_, _, _, _, Some(t@CostClause(_))), _, _, _, pathFindingGoal, _) -> <fail>
    where not ( <?Cheapest()> pathFindingGoal )
    with <generate-error(|ctx, "COST clause only allowed in combination with CHEAPEST")> t

rules // literals

  external is-valid-datetime(|)

  nabl-constraint(|ctx):
    datetime-> <fail>
    where <(?Date(_) + ?Time(_) + ?Timestamp(_)); is-valid-datetime; ?ErrorMessage(_, m)> datetime
    with <generate-error(|ctx, m)> datetime

  nabl-constraint(|ctx):
    t@NormalizedQuery(_, _, _, _, _, _, _, _, _, pgqlVersion) -> <fail>
    where not ( <?"v1.0" + ?"v1.1"> pgqlVersion )
    with <alltd-in-outer-query(check-illegal-java-escaping(|ctx))> t

  check-illegal-java-escaping(|ctx):
    t@String(s) -> <fail>
    where <is-substring(!"\\'")> s
    with <generate-error(|ctx, "Use '' instead of \\' to escape a single quote")> t

  check-illegal-java-escaping(|ctx):
    t@Identifier(identifier) -> <fail>
    where <is-substring(!"\\\"")> identifier
    with <generate-error(|ctx, "Use \"\" instead of \\\" to escape a double quote")> t

rules // IN

  nabl-constraint(|ctx):
    InPredicate(_, Array([x|xs])) -> <fail>
    with <remove-all(same-type(|x)); batch-generate-error(|ctx, $[[<!x; type-to-string>] expected here])> xs

  same-type(|x) = is-numeric-literal; !x; is-numeric-literal
  same-type(|x) = is-boolean-literal; !x; is-boolean-literal
  same-type(|x) = ?String(_); !x; ?String(_)
  same-type(|x) = ?Date(_); !x; ?Date(_)
  same-type(|x) = ?Time(_); !x; ?Time(_)
  same-type(|x) = ?Timestamp(_); !x; ?Timestamp(_)

  type-to-string = is-numeric-literal; !"Numeric"
  type-to-string = is-boolean-literal; !"Boolean"
  type-to-string = ?String(_); !"String"
  type-to-string = ?Date(_); !"Date"
  type-to-string = ?Time(_); !"Time"
  type-to-string = ?Timestamp(_); !"Timestamp"

rules // SELECT

  nabl-constraint(|ctx):
    NormalizedQuery(_, t@SelectClause(_, _), _, None(), _, _, _, _, _, _) -> <fail>
    with <generate-error(|ctx, "SELECT query without MATCH clause not allowed")> t

rules // MODIFY

  // e.g. UPDATE x.prop = 123 ... GROUP BY x.prop
  nabl-constraint(|ctx):
    SetProperty(t@VarRef(_, _), _) -> <fail>
    with <generate-error(|ctx, "Cannot set a property that is grouped by")> t

  // setting a property twice, in either UPDATE or INSERT
  nabl-constraint(|ctx):
    properties -> <fail>
    where <?SetProperties(setPropertyExps) + ?Properties(setPropertyExps)> properties
    with propertyRefs := <map(?SetProperty(<id>, _))> setPropertyExps
       ; duplicatePropertyRefs := <filter(is-elem-contained-more-than-once(|propertyRefs))> propertyRefs
       ; <batch-generate-error(|ctx, "Property is set multiple times")> duplicatePropertyRefs

  is-elem-contained-more-than-once(|elems):
    elem -> <id>
    where duplicates := <filter(?elem)> elems
        ; <gt> (<length>, 1)

  nabl-constraint(|ctx):
    UpdateClause(updates) -> <fail>
    with updateElements := <filter(?Update(VarRef(<id>, _), _))> updates
       ; duplicateUpdateElements := <filter(is-elem-contained-more-than-once(|updateElements))> updateElements
       ; <batch-generate-error(|ctx, "Element is updated multiple times (merge the two updates together)")> duplicateUpdateElements

  nabl-constraint(|ctx):
    DeleteClause(deletions) -> <fail>
    with deleteElements := <filter(?VarRef(<id>, _))> deletions
       ; duplicateDeleteElements := <filter(is-elem-contained-more-than-once(|deleteElements))> deleteElements
       ; <batch-generate-error(|ctx, "Element is deleted multiple times")> duplicateDeleteElements

  nabl-constraint(|ctx):
    t -> <fail>
    where <?VertexInsertion(v, _, _, Some(Properties(setProperties))) +
           ?DirectedEdgeInsertion(v, _, _, _, _, Some(Properties(setProperties))) +
           ?Update(VarRef(v, _), SetProperties(setProperties))> t
    with v' := <strip-annos> v
       ; otherVariablesThanV := <filter(?SetProperty(PropRef(VarRef(<id>, _), _), _); strip-annos; not(?v'))> setProperties
       ; <batch-generate-error(|ctx, $<Did you mean <<!v; ?Identifier(<id>)>>?>)> otherVariablesThanV

  nabl-constraint(|ctx):
    ModifyClause(_, insertUpdateDeleteClauses) -> <fail>
    with additionalInsertClauses := <filter(?InsertClause(_)); try(Tl)> insertUpdateDeleteClauses
       ; additionalUpdateClauses := <filter(?UpdateClause(_)); try(Tl)> insertUpdateDeleteClauses
       ; additionalDeleteClauses := <filter(?DeleteClause(_)); try(Tl)> insertUpdateDeleteClauses
       ; <batch-generate-error(|ctx, "Only a single INSERT clause is allowed per query; use commas to insert multiple elements in a single INSERT clause")> additionalInsertClauses
       ; <batch-generate-error(|ctx, "Only a single UPDATE clause is allowed per query; use commas to update multiple elements in a single UPDATE clause")> additionalUpdateClauses
       ; <batch-generate-error(|ctx, "Only a single DELETE clause is allowed per query; use commas to delete multiple elements in a single DELETE clause")> additionalDeleteClauses

// CREATE PROPERTY GRAPH

  nabl-constraint(|ctx):
    CreatePropertyGraph(_, VertexTables(vertexTables), EdgeTables(edgeTables)) -> <fail>
    with vertexTableNames := <map(?VertexTable(<id>, _, _))> vertexTables
       ; <generate-error-on-duplicates(|ctx, "Table declared as vertex table multiple times")> vertexTableNames
       ; edgeTableNames := <map(?EdgeTable(<id>, _, _, _, _))> edgeTables
       ; <generate-error-on-duplicates(|ctx, "Table declared as edge table multiple times")> edgeTableNames
       ; vertexTableReferences := <collect(?SourceVertexTable(_, <id>) + ?DestinationVertexTable(_, <id>))> edgeTables
       ; unresolvedVertexTableReferences := <diff> (vertexTableReferences, vertexTableNames)
       ; <batch-generate-error(|ctx, "Undeclared vertex table")> unresolvedVertexTableReferences

  nabl-constraint(|ctx):
    PropertyExpressions(expAsVars) -> <fail>
    with expAsVarsWithComplexExpressions := <remove-all(?ExpAsVar(VarRef(Identifier(_)), _))> expAsVars
       ; <batch-generate-error(|ctx, "Only simple expressions (i.e. column references) allowed")> expAsVarsWithComplexExpressions
