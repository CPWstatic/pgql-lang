module Names

imports

  Literals

template options

  keyword -/- [a-zA-Z0-9]

context-free syntax

  VarDef.VarDef = IDENTIFIER
  VarRef.VarRef = IDENTIFIER
  VarAssign.VarAssign = < AS <VarDef>> {case-insensitive}
  PropRef.PropRef = <<VarRef>.<Prop>>

  Prop = Identifier

  Identifier = IDENTIFIER
  Identifier = DELIMITED-IDENTIFIER

lexical syntax

  IDENTIFIER = [a-zA-Z][a-zA-Z0-9\_]*
  FUNCTION-NAME = IDENTIFIER

  DELIMITED-IDENTIFIER             = '"' (~[\"\n\\] | DELIMITED-IDENTIFIER-ESCAPE-CHAR)* '"'
  DELIMITED-IDENTIFIER-ESCAPE-CHAR = ( "\\" [tbnrf\\\"\'] ) | ( '""' )

  DATA-TYPE            = [a-zA-Z][a-zA-Z0-9\_]* (' ' [a-zA-Z][a-zA-Z0-9\_]*)*

lexical restrictions // greedy matching

  IDENTIFIER -/- [a-zA-Z0-9\_]

lexical syntax // reserved keywords

  IDENTIFIER = 'true' {reject}
  IDENTIFIER = 'false' {reject}
  IDENTIFIER = 'null' {reject}

  FUNCTION-NAME = 'count' {reject}
  FUNCTION-NAME = 'min' {reject}
  FUNCTION-NAME = 'max' {reject}
  FUNCTION-NAME = 'sum' {reject}
  FUNCTION-NAME = 'avg' {reject}
  FUNCTION-NAME = 'array_agg' {reject}
  FUNCTION-NAME = 'exists' {reject}
  FUNCTION-NAME = 'asc' {reject}
  FUNCTION-NAME = 'desc' {reject}
  FUNCTION-NAME = 'not' {reject}
  FUNCTION-NAME = 'distinct' {reject}
  FUNCTION-NAME = 'path' {reject}
  FUNCTION-NAME = 'as' {reject}
  FUNCTION-NAME = 'select' {reject}
  FUNCTION-NAME = 'from' {reject}
  FUNCTION-NAME = 'match' {reject}
  FUNCTION-NAME = 'group' {reject}
  FUNCTION-NAME = 'order' {reject}
  FUNCTION-NAME = 'by' {reject}
  FUNCTION-NAME = 'having' {reject}
  FUNCTION-NAME = 'limit' {reject}
  FUNCTION-NAME = 'offset' {reject}
