module DDL

imports

  Names
  Expressions

template options

  keyword -/- [a-zA-Z0-9]

context-free syntax

  Statement.CreatePropertyGraph = <CREATE PROPERTY GRAPH <GraphName> <VertexTables?> <EdgeTables?>> {case-insensitive}

  VertexTables.VertexTables = <VERTEX TABLES ( <{VertexTable ","}+> )> {case-insensitive}

  EdgeTables.EdgeTables = <EDGE TABLES ( <{EdgeTable ","}+> )> {case-insensitive}

  VertexTable.VertexTable = <<TableName> <KeyClause?> <LabelAndPropertiesClause?>>

  EdgeTable.EdgeTable = <<TableName> <KeyClause?> <SourceVertexTable> <DestinationVertexTable> <LabelAndPropertiesClause?>>

  SourceVertexTable.SourceVertexTable = <SOURCE <ReferencedVertexTableKeyClause?> <TableName>> {case-insensitive}

  DestinationVertexTable.DestinationVertexTable = <DESTINATION <ReferencedVertexTableKeyClause?> <TableName>> {case-insensitive}

  ReferencedVertexTableKeyClause.ReferencedVertexTableKeyClause = <<KeyClause> REFERENCES> {case-insensitive}

  LabelAndPropertiesClause.LabelAndPropertiesClause = LabelAndProperties+

  LabelAndPropertiesClause.LabelAndPropertiesClauseWithDefaultLabel = <<PropertiesClause> <LabelAndProperties*>>

  LabelAndProperties.LabelAndProperties = <<LabelClause> <PropertiesClause?>>

  LabelClause.LabelClause = <LABEL <Identifier>> {case-insensitive}

  PropertiesClause.PropertiesClause = <PROPERTIES ( <{ExpAsVar ","}+> )> {case-insensitive}

  KeyClause.KeyClause = <KEY ( <{Identifier ","}+> )> {case-insensitive}

  Statement.DropPropertyGraph = <DROP PROPERTY GRAPH <GraphName>> {case-insensitive}
