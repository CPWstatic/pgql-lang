module GraphPattern

imports
  
  Literals
  Names
  Expressions
  Legacy

template options

  keyword -/- [a-zA-Z0-9]

context-free syntax

  Pgql11FromClause.Pgql11FromClause = <FROM <Identifier?>> {case-insensitive}

  MatchWhereClauses.MatchWhereClauses = <MATCH <{PathPattern ",\n"}+> <WhereClause?>> {case-insensitive}

  LocalGraphName.GraphName = Identifier

  GraphPattern.GraphPattern = <<{PathPattern ",\n"}+>>

context-free syntax

  PathPattern.PathPattern = <<Vertex><{EdgeVertex ""}+>>
  PathPattern.SingleVertex = <(<ElemContents>)> // PGQL 1.0
  Vertex.Vertex = <(<ElemContents>)>

  EdgeVertex.EdgeVertex = < <Connection> <Vertex>>
  Connection.OutConn = [-[EdgeOrPathContents?]->[PathQuantifier?]]
  Connection.InConn = [<-[EdgeOrPathContents?]-[PathQuantifier?]]
  Connection.UndirectedEdge = [-[EdgeContents?]-[PathQuantifier?]]
  Connection.OutEdge = [->[PathQuantifier?]]
  Connection.InEdge = [<-[PathQuantifier?]]
  Connection.UndirectedEdge = [-[PathQuantifier?]]

  Connection.ParenthesizedPath = <( <Vertex?> <Connection> <Vertex?> <WhereClause?> )<PathQuantifier?>>

  PathPattern.Shortest = <<TopK?> shortest ( <PathPattern> )> {case-insensitive}
  TopK.TopK = <top <UNSIGNED-INT>> {case-insensitive}

  EdgeContents.EdgeContents = <[<ElemContents>]>
  EdgeOrPathContents = EdgeContents
  EdgeOrPathContents.Path = </<IDENTIFIER?><LabelPredicate><PathQuantifier?>/>

  PathQuantifier.ZeroOrMore = <*>
  PathQuantifier.OneOrMore = <+>
  PathQuantifier.Optional = <?>
  PathQuantifier.ExactlyN = <{<UNSIGNED-INT>}>
  PathQuantifier.NOrMore = <{<UNSIGNED-INT>,}>
  PathQuantifier.BetweenNAndM = <{<UNSIGNED-INT>,<UNSIGNED-INT>}>
  PathQuantifier.BetweenZeroAndM = <{,<UNSIGNED-INT>}>

context-free syntax

  ElemContents.ElemContents  = <<IDENTIFIER?><LabelPredicate?><Legacy10Ids?><Legacy10WithInlinedConstraints?>>
  LabelPredicate.Labels      = <:<Labels>>
  Labels.Label               = Identifier
  Labels                     = BindVariable
  Labels.Or                  = <<Labels>|<Labels>> {left} 
